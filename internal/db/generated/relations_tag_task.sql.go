// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: relations_tag_task.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTagTaskRelation = `-- name: CreateTagTaskRelation :exec
INSERT INTO tag_task_relations (task_id, tag_id)
VALUES($1, $2)
`

type CreateTagTaskRelationParams struct {
	TaskID pgtype.UUID
	TagID  pgtype.UUID
}

func (q *Queries) CreateTagTaskRelation(ctx context.Context, arg CreateTagTaskRelationParams) error {
	_, err := q.db.Exec(ctx, createTagTaskRelation, arg.TaskID, arg.TagID)
	return err
}

const deleteTagTaskRelation = `-- name: DeleteTagTaskRelation :exec
DELETE FROM tag_task_relations
WHERE task_id = $1 AND tag_id = $2
`

type DeleteTagTaskRelationParams struct {
	TaskID pgtype.UUID
	TagID  pgtype.UUID
}

func (q *Queries) DeleteTagTaskRelation(ctx context.Context, arg DeleteTagTaskRelationParams) error {
	_, err := q.db.Exec(ctx, deleteTagTaskRelation, arg.TaskID, arg.TagID)
	return err
}

const getAllTaskOptions = `-- name: GetAllTaskOptions :many
SELECT name, id from tasks 
WHERE 
    vault_id = $1::UUID
  	-- authorization, checks if user is inside of this vault
	AND EXISTS(
		SELECT 1 FROM vault_user_relations v_u_rel
		WHERE v_u_rel.user_id = $2::UUID 
		AND v_u_rel.vault_id = $1::UUID
	)
`

type GetAllTaskOptionsParams struct {
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

type GetAllTaskOptionsRow struct {
	Name string
	ID   pgtype.UUID
}

// this is for the UI whenever we wanna add a relation from a task to a tag
func (q *Queries) GetAllTaskOptions(ctx context.Context, arg GetAllTaskOptionsParams) ([]GetAllTaskOptionsRow, error) {
	rows, err := q.db.Query(ctx, getAllTaskOptions, arg.VaultID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTaskOptionsRow
	for rows.Next() {
		var i GetAllTaskOptionsRow
		if err := rows.Scan(&i.Name, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
