// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTag = `-- name: CreateTag :exec
WITH authorized_user AS (
  SELECT 1
  FROM vault_user_relations
  WHERE user_id = $2::UUID
    AND vault_id = $3::UUID
)
INSERT INTO tags (name, user_id, vault_id)
SELECT $1, $2::UUID, $3::UUID
FROM authorized_user
`

type CreateTagParams struct {
	Name    string
	UserID  pgtype.UUID
	VaultID pgtype.UUID
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) error {
	_, err := q.db.Exec(ctx, createTag, arg.Name, arg.UserID, arg.VaultID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags tg
WHERE tg.id = $1 AND tg.vault_id = $2::UUID
  -- authorization, checks if user is inside of this vault
  AND EXISTS(
    SELECT 1 FROM vault_user_relations v_u_rel
      WHERE v_u_rel.user_id = $3::UUID 
      AND v_u_rel.vault_id = $2::UUID
  )
`

type DeleteTagParams struct {
	ID      pgtype.UUID
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) DeleteTag(ctx context.Context, arg DeleteTagParams) error {
	_, err := q.db.Exec(ctx, deleteTag, arg.ID, arg.VaultID, arg.UserID)
	return err
}

const getAllTagsDesc = `-- name: GetAllTagsDesc :many
SELECT id, name, created_at, updated_at, user_id, vault_id FROM tags
WHERE vault_id = $1::UUID
  AND EXISTS(
    SELECT 1 FROM vault_user_relations v_u_rel
      WHERE v_u_rel.user_id = $2::UUID 
      AND v_u_rel.vault_id = $1::UUID
  )
ORDER BY id DESC
`

type GetAllTagsDescParams struct {
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

// authorization, checks if user is inside of this vault
func (q *Queries) GetAllTagsDesc(ctx context.Context, arg GetAllTagsDescParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getAllTagsDesc, arg.VaultID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.VaultID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagWithTaskRelations = `-- name: GetTagWithTaskRelations :many
WITH tg_author AS (
  SELECT tg.id, tg.name, tg.user_id, tg.vault_id, tg.created_at, tg.updated_at,
         u.path_to_pfp, u.username
  FROM tags tg
  JOIN users u ON tg.user_id = u.id
)
SELECT tg_author.id, tg_author.name, tg_author.user_id, tg_author.vault_id, tg_author.created_at, tg_author.updated_at,
       t.id AS task_id, t.name AS task_name, t.user_id AS task_user_id,
       tg_author.path_to_pfp AS author_path_to_pfp, tg_author.username AS author_username
FROM tg_author
LEFT JOIN tag_task_relations rel ON tg_author.id = rel.tag_id
LEFT JOIN tasks t ON t.id = rel.task_id
WHERE tg_author.id = $1::UUID 
  AND tg_author.vault_id = $2::UUID
  -- authorization, checks if user is inside of this vault
  AND EXISTS(
    SELECT 1 FROM vault_user_relations v_u_rel
      WHERE v_u_rel.user_id = $3::UUID 
      AND v_u_rel.vault_id = $2::UUID
  )
`

type GetTagWithTaskRelationsParams struct {
	ID      pgtype.UUID
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

type GetTagWithTaskRelationsRow struct {
	ID              pgtype.UUID
	Name            string
	UserID          pgtype.UUID
	VaultID         pgtype.UUID
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	TaskID          pgtype.UUID
	TaskName        pgtype.Text
	TaskUserID      pgtype.UUID
	AuthorPathToPfp string
	AuthorUsername  string
}

func (q *Queries) GetTagWithTaskRelations(ctx context.Context, arg GetTagWithTaskRelationsParams) ([]GetTagWithTaskRelationsRow, error) {
	rows, err := q.db.Query(ctx, getTagWithTaskRelations, arg.ID, arg.VaultID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagWithTaskRelationsRow
	for rows.Next() {
		var i GetTagWithTaskRelationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.VaultID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TaskID,
			&i.TaskName,
			&i.TaskUserID,
			&i.AuthorPathToPfp,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsWithTaskRelations = `-- name: GetTagsWithTaskRelations :many
WITH tg_author AS (
  SELECT tg.id, tg.name, tg.user_id, tg.vault_id, tg.created_at, tg.updated_at,
         u.path_to_pfp, u.username
  FROM tags tg
  JOIN users u ON tg.user_id = u.id
)
SELECT tg_author.id, tg_author.name, tg_author.user_id, tg_author.vault_id, tg_author.created_at, tg_author.updated_at,
       t.id AS task_id, t.name AS task_name, t.user_id AS task_user_id,
       tg_author.path_to_pfp AS author_path_to_pfp, tg_author.username AS author_username
FROM tg_author
LEFT JOIN tag_task_relations rel ON tg_author.id = rel.tag_id
LEFT JOIN tasks t ON t.id = rel.task_id
WHERE tg_author.vault_id = $1::UUID
  -- authorization, checks if user is inside of this vault
  AND EXISTS(
    SELECT 1 FROM vault_user_relations v_u_rel
      WHERE v_u_rel.user_id = $2::UUID 
      AND v_u_rel.vault_id = $1::UUID
  )
`

type GetTagsWithTaskRelationsParams struct {
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

type GetTagsWithTaskRelationsRow struct {
	ID              pgtype.UUID
	Name            string
	UserID          pgtype.UUID
	VaultID         pgtype.UUID
	CreatedAt       pgtype.Timestamp
	UpdatedAt       pgtype.Timestamp
	TaskID          pgtype.UUID
	TaskName        pgtype.Text
	TaskUserID      pgtype.UUID
	AuthorPathToPfp string
	AuthorUsername  string
}

func (q *Queries) GetTagsWithTaskRelations(ctx context.Context, arg GetTagsWithTaskRelationsParams) ([]GetTagsWithTaskRelationsRow, error) {
	rows, err := q.db.Query(ctx, getTagsWithTaskRelations, arg.VaultID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTagsWithTaskRelationsRow
	for rows.Next() {
		var i GetTagsWithTaskRelationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.VaultID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TaskID,
			&i.TaskName,
			&i.TaskUserID,
			&i.AuthorPathToPfp,
			&i.AuthorUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags 
SET name = $1::TEXT
WHERE id = $2::UUID AND vault_id = $3::UUID
  -- authorization, checks if user is inside of this vault
 AND EXISTS(
    SELECT 1 FROM vault_user_relations v_u_rel
      WHERE v_u_rel.user_id = $4::UUID 
      AND v_u_rel.vault_id = $3::UUID
  )
`

type UpdateTagParams struct {
	Name    string
	ID      pgtype.UUID
	VaultID pgtype.UUID
	UserID  pgtype.UUID
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.Exec(ctx, updateTag,
		arg.Name,
		arg.ID,
		arg.VaultID,
		arg.UserID,
	)
	return err
}
