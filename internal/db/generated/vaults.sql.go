// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: vaults.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createVault = `-- name: CreateVault :one
WITH 
	new_vault AS (
		INSERT INTO vaults (name, description, kind) 
		VALUES ($1, $2, 'collaborative') 
		RETURNING id
	)
	INSERT INTO vault_user_relations (vault_id, user_id, role)
		VALUES(
			(SELECT id from new_vault), $3, 'owner'
		)
		RETURNING (SELECT id from new_vault)
`

type CreateVaultParams struct {
	Name        string
	Description string
	UserID      pgtype.UUID
}

// TODO: authenticate
// CREATE
func (q *Queries) CreateVault(ctx context.Context, arg CreateVaultParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createVault, arg.Name, arg.Description, arg.UserID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteVault = `-- name: DeleteVault :exec
DELETE FROM vaults v
WHERE 
	v.id = $1
	-- authorization part, checks if person is owner of vault
	AND EXISTS (
		SELECT 1 FROM vault_user_relations rel
		WHERE 
			rel.user_id = $2::UUID
			AND rel.vault_id = $1
			AND rel.role = 'owner'
	)
`

type DeleteVaultParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteVault(ctx context.Context, arg DeleteVaultParams) error {
	_, err := q.db.Exec(ctx, deleteVault, arg.ID, arg.UserID)
	return err
}

const getVaultWithCollaborators = `-- name: GetVaultWithCollaborators :many
SELECT v.name, v.description, v.ID, v.locked, v.kind, v.created_at, v.updated_at, 
	rel.role AS collaborator_role, us.username AS collaborator_username, us.path_to_pfp AS collaborator_path_to_pfp
FROM vaults v
LEFT JOIN vault_user_relations rel 
	ON v.id = rel.vault_id 
LEFT JOIN users us
	ON us.id = rel.user_id
WHERE
	EXISTS (
        SELECT
            1
        FROM
            vault_user_relations r_user_vault_check
        WHERE
            r_user_vault_check.vault_id = v.id 
            AND r_user_vault_check.user_id = $1::UUID
			AND r_user_vault_check.vault_id = $2::UUID
			
    )
ORDER BY v.created_at DESC
`

type GetVaultWithCollaboratorsParams struct {
	UserID  pgtype.UUID
	VaultID pgtype.UUID
}

type GetVaultWithCollaboratorsRow struct {
	Name                  string
	Description           string
	ID                    pgtype.UUID
	Locked                bool
	Kind                  VaultKindType
	CreatedAt             pgtype.Timestamp
	UpdatedAt             pgtype.Timestamp
	CollaboratorRole      NullVaultRelRoleType
	CollaboratorUsername  pgtype.Text
	CollaboratorPathToPfp pgtype.Text
}

func (q *Queries) GetVaultWithCollaborators(ctx context.Context, arg GetVaultWithCollaboratorsParams) ([]GetVaultWithCollaboratorsRow, error) {
	rows, err := q.db.Query(ctx, getVaultWithCollaborators, arg.UserID, arg.VaultID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVaultWithCollaboratorsRow
	for rows.Next() {
		var i GetVaultWithCollaboratorsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.Locked,
			&i.Kind,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CollaboratorRole,
			&i.CollaboratorUsername,
			&i.CollaboratorPathToPfp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVaultsWithCollaborators = `-- name: GetVaultsWithCollaborators :many
SELECT v.name, v.description, v.ID, v.locked, v.kind, v.created_at, v.updated_at, 
	rel.role AS collaborator_role, us.username AS collaborator_username, us.path_to_pfp AS collaborator_path_to_pfp
FROM vaults v
JOIN vault_user_relations rel 
	ON v.id = rel.vault_id 
JOIN users us
	ON us.id = rel.user_id
WHERE
    EXISTS (
        SELECT
            1
        FROM
            vault_user_relations r_user_vault_check
        WHERE
            r_user_vault_check.vault_id = v.id 
            AND r_user_vault_check.user_id = $1::UUID
    )
ORDER BY
    v.created_at DESC, 
    us.username ASC
`

type GetVaultsWithCollaboratorsRow struct {
	Name                  string
	Description           string
	ID                    pgtype.UUID
	Locked                bool
	Kind                  VaultKindType
	CreatedAt             pgtype.Timestamp
	UpdatedAt             pgtype.Timestamp
	CollaboratorRole      VaultRelRoleType
	CollaboratorUsername  string
	CollaboratorPathToPfp string
}

func (q *Queries) GetVaultsWithCollaborators(ctx context.Context, userID pgtype.UUID) ([]GetVaultsWithCollaboratorsRow, error) {
	rows, err := q.db.Query(ctx, getVaultsWithCollaborators, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVaultsWithCollaboratorsRow
	for rows.Next() {
		var i GetVaultsWithCollaboratorsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ID,
			&i.Locked,
			&i.Kind,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CollaboratorRole,
			&i.CollaboratorUsername,
			&i.CollaboratorPathToPfp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVault = `-- name: UpdateVault :exec
UPDATE vaults v
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  locked = $4
WHERE 
	v.id = $1
	-- authorization part, checks if person is owner
	AND EXISTS (
		SELECT 1 FROM vault_user_relations rel
		WHERE 
			rel.user_id = $5::UUID
			AND rel.vault_id = $1
			AND rel.role = 'owner'
)
`

type UpdateVaultParams struct {
	ID          pgtype.UUID
	Name        pgtype.Text
	Description pgtype.Text
	Locked      bool
	UserID      pgtype.UUID
}

func (q *Queries) UpdateVault(ctx context.Context, arg UpdateVaultParams) error {
	_, err := q.db.Exec(ctx, updateVault,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Locked,
		arg.UserID,
	)
	return err
}
