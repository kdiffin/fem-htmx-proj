// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: relations_user_vault.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCollaboratorVaultRelation = `-- name: CreateCollaboratorVaultRelation :exec
WITH authorized_user AS (
  SELECT 1
  FROM vault_user_relations auth_rel
  WHERE auth_rel.user_id = $3::UUID
    AND auth_rel.vault_id = $1::UUID
    AND role = 'owner'
),
user_id_from_username AS (
  SELECT id FROM users WHERE users.username = $4
)
INSERT INTO vault_user_relations (vault_id, user_id, role)
SELECT $1, u.id, $2
FROM user_id_from_username u 
WHERE
    EXISTS (SELECT 1 FROM authorized_user)
`

type CreateCollaboratorVaultRelationParams struct {
	VaultID              pgtype.UUID
	Role                 VaultRelRoleType
	UserID               pgtype.UUID
	CollaboratorUsername string
}

func (q *Queries) CreateCollaboratorVaultRelation(ctx context.Context, arg CreateCollaboratorVaultRelationParams) error {
	_, err := q.db.Exec(ctx, createCollaboratorVaultRelation,
		arg.VaultID,
		arg.Role,
		arg.UserID,
		arg.CollaboratorUsername,
	)
	return err
}

const deleteCollaboratorVaultRelation = `-- name: DeleteCollaboratorVaultRelation :exec
WITH user_id_from_username AS (
  SELECT id FROM users WHERE username = $3
)
DELETE FROM vault_user_relations v
WHERE
  v.vault_id = $1::UUID AND v.user_id = (SELECT id FROM user_id_from_username)
  -- owner authorziation
  AND EXISTS (
		SELECT 1 FROM vault_user_relations auth_rel
		WHERE 
			auth_rel.user_id = $2::UUID
      AND auth_rel.vault_id = $1::UUID
			AND auth_rel.role = 'owner'
	)
`

type DeleteCollaboratorVaultRelationParams struct {
	VaultID              pgtype.UUID
	UserID               pgtype.UUID
	CollaboratorUsername string
}

func (q *Queries) DeleteCollaboratorVaultRelation(ctx context.Context, arg DeleteCollaboratorVaultRelationParams) error {
	_, err := q.db.Exec(ctx, deleteCollaboratorVaultRelation, arg.VaultID, arg.UserID, arg.CollaboratorUsername)
	return err
}

const signUpAndCreateDefaultVault = `-- name: SignUpAndCreateDefaultVault :exec
WITH
  new_vault AS (
    INSERT INTO vaults (name, description, kind)
    VALUES ('Default', 'This is your default vault. Only you can access this.', 'default')
    RETURNING id
  ),
  new_user AS (
    INSERT INTO users (username, password_hash, default_vault_id)
    VALUES ($1, $2, (SELECT id FROM new_vault))
    RETURNING id
  )
    INSERT INTO vault_user_relations (vault_id, role, user_id)
    VALUES (
      (SELECT id FROM new_vault),
      'owner',
      (SELECT id FROM new_user)
    )
`

type SignUpAndCreateDefaultVaultParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) SignUpAndCreateDefaultVault(ctx context.Context, arg SignUpAndCreateDefaultVaultParams) error {
	_, err := q.db.Exec(ctx, signUpAndCreateDefaultVault, arg.Username, arg.PasswordHash)
	return err
}
