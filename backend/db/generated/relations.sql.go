// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: relations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTagTaskRelation = `-- name: CreateTagTaskRelation :exec
INSERT INTO tag_task_relations (task_id, tag_id) VALUES($1, $2)
`

type CreateTagTaskRelationParams struct {
	TaskID pgtype.Int4
	TagID  pgtype.Int4
}

func (q *Queries) CreateTagTaskRelation(ctx context.Context, arg CreateTagTaskRelationParams) error {
	_, err := q.db.Exec(ctx, createTagTaskRelation, arg.TaskID, arg.TagID)
	return err
}

const deleteTagTaskRelation = `-- name: DeleteTagTaskRelation :exec
DELETE FROM tag_task_relations WHERE task_id = $1
`

func (q *Queries) DeleteTagTaskRelation(ctx context.Context, taskID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, deleteTagTaskRelation, taskID)
	return err
}

const getTagsOfTask = `-- name: GetTagsOfTask :many
SELECT tg.ID, tg.name FROM tags tg
INNER JOIN tag_task_relations rel ON tg.ID = rel.tag_id
WHERE rel.task_id = $1
`

func (q *Queries) GetTagsOfTask(ctx context.Context, taskID pgtype.Int4) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsOfTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
